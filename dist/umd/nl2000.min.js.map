{"version":3,"file":"nl2000.min.js","sources":["../../src/convert.ts","../../src/scheme.ts","../../src/index.ts"],"sourcesContent":["export const fast = (fromRadix: number, toRadix: number, input: number[]) => {\n  const fromRadixʹ = BigInt(fromRadix)\n  const toRadixʹ = BigInt(toRadix)\n  const output = []\n  let n = BigInt(0)\n  for (let i = 0; i < input.length; i++)\n    n = fromRadixʹ * n + BigInt(input[i])\n  for (; n; n /= toRadixʹ)\n    output.push(Number(n % toRadixʹ))\n  return output.reverse()\n}\n\nexport const slow = (fromRadix: number, toRadix: number, input: number[]) => {\n  const output = []\n  while (input.some(n => n > 0)) {\n    let remainder = 0\n    for (let i = 0; i < input.length; i++) {\n      const n = fromRadix * remainder + input[i]\n      input[i] = n / toRadix >>> 0 // integer division\n      remainder = n % toRadix\n    }\n    output.push(remainder)\n  }\n  return output.reverse()\n}\n\nexport const convert =\n  typeof BigInt === 'function'\n    ? fast\n    : slow\n","export const scheme = (range: number) =>\n  String.fromCharCode(...Array(range).keys())\n    .replace(/[^\\p{Nd}\\p{LC}]|[\\u0530-\\u1d6a\\u1fbe]/ug, '')\n","import { convert } from './convert'\nimport { scheme } from './scheme'\n\nexport type FnFactory<T, U> = (scheme?: string | string[]) => Fn<T, U>\nexport type Fn<T, U> = (input: Iterable<T>) => U\n\nexport const NL2000 = scheme(0x2000)\nexport const NL180  = scheme(0x180)\nexport const NL100  = scheme(0x100)\nexport const NL80   = scheme(0x80)\nexport const NL60   = scheme(0x60)\n\nexport const encoder: FnFactory<number, string> = (scheme = NL2000) => input =>\n  convert(0x100, scheme.length, [...input]).map(i => scheme[i]).join('')\n\nexport const decoder: FnFactory<string, number[]> = (scheme = NL2000) => input =>\n  convert(scheme.length, 0x100, [...input].map(c => scheme.indexOf(c)))\n\nexport const encode = encoder()\nexport const decode = decoder()\n"],"names":["convert","BigInt","fromRadix","toRadix","input","fromRadixʹ","toRadixʹ","output","n","i","length","push","Number","reverse","some","remainder","scheme","range","String","fromCharCode","Array","keys","replace","NL2000","NL180","NL100","NL80","NL60","encoder","map","join","decoder","c","indexOf","encode","decode"],"mappings":"mMAAO,MA0BMA,EACO,mBAAXC,OA3BW,CAACC,EAAmBC,EAAiBC,KACvD,MAAMC,EAAaJ,OAAOC,GACpBI,EAAWL,OAAOE,GAClBI,EAAS,GACf,IAAIC,EAAIP,OAAO,GACf,IAAK,IAAIQ,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAChCD,EAAIH,EAAaG,EAAIP,OAAOG,EAAMK,IACpC,KAAOD,EAAGA,GAAKF,EACbC,EAAOI,KAAKC,OAAOJ,EAAIF,IACzB,OAAOC,EAAOM,WAGI,CAACX,EAAmBC,EAAiBC,KACvD,MAAMG,EAAS,GACf,KAAOH,EAAMU,KAAKN,GAAKA,EAAI,IAAI,CAC7B,IAAIO,EAAY,EAChB,IAAK,IAAIN,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACrC,MAAMD,EAAIN,EAAYa,EAAYX,EAAMK,GACxCL,EAAMK,GAAKD,EAAIL,IAAY,EAC3BY,EAAYP,EAAIL,EAElBI,EAAOI,KAAKI,GAEd,OAAOR,EAAOM,WCvBHG,EAAUC,GACrBC,OAAOC,gBAAgBC,MAAMH,GAAOI,QACjCC,QAAQ,0CAA2C,ICI3CC,EAASP,EAAO,MAChBQ,EAASR,EAAO,KAChBS,EAAST,EAAO,KAChBU,EAASV,EAAO,KAChBW,EAASX,EAAO,IAEhBY,EAAqC,CAACZ,EAASO,IAAWnB,GACrEJ,EAAQ,IAAOgB,EAAON,OAAQ,IAAIN,IAAQyB,IAAIpB,GAAKO,EAAOP,IAAIqB,KAAK,IAExDC,EAAuC,CAACf,EAASO,IAAWnB,GACvEJ,EAAQgB,EAAON,OAAQ,IAAO,IAAIN,GAAOyB,IAAIG,GAAKhB,EAAOiB,QAAQD,KAEtDE,EAASN,IACTO,EAASJ"}