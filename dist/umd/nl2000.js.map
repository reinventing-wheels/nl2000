{"version":3,"file":"nl2000.js","sources":["../../src/convert.ts","../../src/scheme.ts","../../src/index.ts"],"sourcesContent":["export const fast = (fromRadix: number, toRadix: number, input: number[]) => {\n  const fromRadixʹ = BigInt(fromRadix)\n  const toRadixʹ = BigInt(toRadix)\n  const output = []\n  let n = BigInt(0)\n  for (let i = 0; i < input.length; i++)\n    n = fromRadixʹ * n + BigInt(input[i])\n  for (; n; n /= toRadixʹ)\n    output.push(Number(n % toRadixʹ))\n  return output.reverse()\n}\n\nexport const slow = (fromRadix: number, toRadix: number, input: number[]) => {\n  const output = []\n  while (input.some(n => n > 0)) {\n    let remainder = 0\n    for (let i = 0; i < input.length; i++) {\n      const n = fromRadix * remainder + input[i]\n      input[i] = n / toRadix >>> 0 // integer division\n      remainder = n % toRadix\n    }\n    output.push(remainder)\n  }\n  return output.reverse()\n}\n\nexport const convert =\n  typeof BigInt === 'function'\n    ? fast\n    : slow\n","export const scheme = (range: number) =>\n  String.fromCharCode(...Array(range).keys())\n    .replace(/[^\\p{Nd}\\p{LC}]|[\\u0530-\\u1d6a\\u1fbe]/ug, '')\n","import { convert } from './convert'\nimport { scheme } from './scheme'\n\nexport type FnFactory<T, U> = (scheme?: string | string[]) => Fn<T, U>\nexport type Fn<T, U> = (input: Iterable<T>) => U\n\nexport const NL2000 = scheme(0x2000)\nexport const NL180  = scheme(0x180)\nexport const NL100  = scheme(0x100)\nexport const NL80   = scheme(0x80)\nexport const NL60   = scheme(0x60)\n\nexport const encoder: FnFactory<number, string> = (scheme = NL2000) => input =>\n  convert(0x100, scheme.length, [...input]).map(i => scheme[i]).join('')\n\nexport const decoder: FnFactory<string, number[]> = (scheme = NL2000) => input =>\n  convert(scheme.length, 0x100, [...input].map(c => scheme.indexOf(c)))\n\nexport const encode = encoder()\nexport const decode = decoder()\n"],"names":[],"mappings":";;;;;;EAAO,MAAM,IAAI,GAAG,CAAC,SAAiB,EAAE,OAAe,EAAE,KAAe;MACtE,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,CAAA;MACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;MAChC,MAAM,MAAM,GAAG,EAAE,CAAA;MACjB,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;MACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;UACnC,CAAC,GAAG,UAAU,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;MACvC,OAAO,CAAC,EAAE,CAAC,IAAI,QAAQ;UACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAA;MACnC,OAAO,MAAM,CAAC,OAAO,EAAE,CAAA;EACzB,CAAC,CAAA;AAED,EAAO,MAAM,IAAI,GAAG,CAAC,SAAiB,EAAE,OAAe,EAAE,KAAe;MACtE,MAAM,MAAM,GAAG,EAAE,CAAA;MACjB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;UAC7B,IAAI,SAAS,GAAG,CAAC,CAAA;UACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;cACrC,MAAM,CAAC,GAAG,SAAS,GAAG,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;cAC1C,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,KAAK,CAAC,CAAA;cAC5B,SAAS,GAAG,CAAC,GAAG,OAAO,CAAA;WACxB;UACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;OACvB;MACD,OAAO,MAAM,CAAC,OAAO,EAAE,CAAA;EACzB,CAAC,CAAA;AAED,EAAO,MAAM,OAAO,GAClB,OAAO,MAAM,KAAK,UAAU;QACxB,IAAI;QACJ,IAAI,CAAA;;EC7BH,MAAM,MAAM,GAAG,CAAC,KAAa,KAClC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;OACxC,OAAO,CAAC,yCAAyC,EAAE,EAAE,CAAC,CAAA;;QCI9C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;AACpC,QAAa,KAAK,GAAI,MAAM,CAAC,KAAK,CAAC,CAAA;AACnC,QAAa,KAAK,GAAI,MAAM,CAAC,KAAK,CAAC,CAAA;AACnC,QAAa,IAAI,GAAK,MAAM,CAAC,IAAI,CAAC,CAAA;AAClC,QAAa,IAAI,GAAK,MAAM,CAAC,IAAI,CAAC,CAAA;AAElC,QAAa,OAAO,GAA8B,CAAC,MAAM,GAAG,MAAM,KAAK,KAAK,IAC1E,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AAExE,QAAa,OAAO,GAAgC,CAAC,MAAM,GAAG,MAAM,KAAK,KAAK,IAC5E,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAEvE,QAAa,MAAM,GAAG,OAAO,EAAE,CAAA;AAC/B,QAAa,MAAM,GAAG,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;"}